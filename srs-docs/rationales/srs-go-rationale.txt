Random justifications and rationale for how the srs-go system
works.


Most experiments can be broken down into a sequence of steps, so we
wanted a tool to help automate running such a system. Although more
complicated systems with explicit dependencies are possible, a simple
linear system (where step i depends on step i-1) is very easy to write
quick experiments for, and simple to reason about.

The system lets you write a experiment as a template, and then run an
instance of that template without having to shepherd the steps.

We don't want to commit too much to what a particular step looks like,
so we allow a step to be any executable as long as it follows the
simple calling convention of taking an input config file and an output
config file as arguments.

This does mean that existing code will require a wrapper to be used as
a step, but the wrapper will usually be very simple.

We want experimenters to be able to tweak the system (e.g. change
config parameters, edit steps, add steps) without affecting others, so
the system copies the template to a destination directory specified by
the user.

This also allows us to exactly repeat an experiment at a later date.

We want the steps to be as independent from each other as possible so
that steps can be reused between templates. This is why we require
that the step takes an input config file and write an output config
file rather than allowing arbitrary arguments. Later steps don't have
to know which step were run; just the config variables of interest.

By passing the output config file path as an argument, the writer and
user of the template don't have to worry about naming conventions
for config files - the intermediate config file paths are named
automatically and stored in the SRS-GO/config directory of the
experiment.

----------------------------------------------------------------------

The choice of considering a file a valid step by the name (any
file starting with "step" is considered a step) was to allow other
files to coexist in the template. You can put text files, model files,
help files, or other executables as long as they don't start with the
word "step". Maybe STEP would be better (less chance of accidental
collision?).

The other choice of considering anything that's executable as a step
is possible, but would preclude putting one-off executables that
aren't themselves steps in the template.

----------------------------------------------------------------------

All the files that srs-go uses are stored in a single directory
under each directory step (by default called SRS-GO). Since it's
caps, it'll generally be listed first. By putting all files here,
the directory stays clean -- all files but SRS-GO are either from
the template or generated by the steps.

----------------------------------------------------------------------

We *really* want to encourage people to use disk correctly. Since this
has been historically difficult, we wanted a smooth transition. If you
ignore the existance of SRS-GO/data, you can just store everything in
the experiment directory, which will usually be backed up. But if you
want more or faster disk space, you can look under SRS-GO/data for
links to various types of disk. This frees the step writer from
having to come up with naming conventions. The links point to
automatically generated directories based on a hash of the template,
the directory, and the user. That way, if you run the same experiment
twice, you get the same directory. But if somebody else runs it, or if
you change the experiment, you get a new directory.

As with all the templates, the choice of links is controlled by a
config file.

----------------------------------------------------------------------

To aid debugging, we want to capture exactly the stdout and stderr of
the steps without interspersing flag or log information from srs-go
itself. Therefore, flag files, stdin, stdout, and logs are all stored
in different files (all under SRS-GO/logs).

----------------------------------------------------------------------

Given our simplifying assumption of linear dependance, if stepN fails,
no stepN+i should run. Therefore, when a step fails, srs-go stops
running.

----------------------------------------------------------------------

Restarts
Config files
templates




