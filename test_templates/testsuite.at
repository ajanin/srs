m4_define([AT_PACKAGE_STRING],    [srs-go v0.4])
m4_define([AT_PACKAGE_BUGREPORT], [janin@icsi.berkeley.edu])

AT_INIT([Templates tests])

######################################################################
#
# Most of the test work the same way. srs-go is called. It's output
# is captured to test.log, but otherwise ignored (this is just to
# help with debugging). The template also writes an output file,
# which is checked against expected ground truth. Then we erase
# the template. Note that if tests fail, you should manually
# call srs-go -cleanall to avoid orphan experiments.
#

######################################################################
######################################################################
# 
# Misc tests
#

AT_BANNER([Misc tests])

AT_SETUP([Test config1])
AT_CHECK([srs-go -template $at_dir/config -dir exp.test -config $at_dir/config/test1.config c1 commandline outfile `pwd`/test.out > test.log 2>&1], [], [])
AT_CHECK([cat test.out], [], [v1 v1 configfile c1 commandline
c1 commandline
])
AT_CLEANUP

AT_SETUP([Test config2])
AT_CHECK([srs-go -template $at_dir/config -dir exp.test -config $at_dir/config/test2.config c1 commandline outfile `pwd`/test.out > test.log 2>&1], [], [])
AT_CHECK([cat test.out], [], [v1 v1 configfile c1 commandline
c1 commandline
])
AT_CLEANUP

AT_SETUP([Test config3])
AT_CHECK([srs-go -template $at_dir/config -dir exp.test -config $at_dir/config/test2.config outfile `pwd`/test.out > test.log 2>&1], [], [])
AT_CHECK([cat test.out], [], [v1 v1 configfile c1 configfile
c1 configfile
])
AT_CLEANUP


######################################################################
######################################################################
# 
# Test nested templates.
#

AT_BANNER([Nested template test])

######################################################################
#
# Run template "nest" to completion. Output to test.out. srs-go
# log file in test.log.
#

AT_SETUP([Simple run to completion])
AT_CHECK([srs-go -template $at_dir/nest -dir exp.test -- outfile `pwd`/test.out > test.log 2>&1], [], [])
AT_CHECK([cat test.out], [], [step010
step010.step010.step020
step020.step010.step020
step020.step020
step010.step030.step020
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

######################################################################
#
# Fail at a particular step.
#

AT_SETUP([Fail in a nested step])
AT_CHECK([srs-go -template $at_dir/nest -dir exp.test -- outfile `pwd`/test.out failsteps step020.step010.step020 > test.log 2>&1], [1], [])
AT_CHECK([cat test.out], [], [step010
step010.step010.step020
step020.step010.step020
step020.step010.step020 failed
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

######################################################################
#
# Start from scratch in the middle of a template
#

AT_SETUP([Start in the middle])
AT_CHECK([srs-go -template $at_dir/nest -dir exp.test -from step020/step010.step020/step020.step010.step020 -- outfile `pwd`/test.out > test.log 2>&1], [], [])
AT_CHECK([cat test.out], [], [step020.step010.step020
step020.step020
step010.step030.step020
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

######################################################################
#
# Test rerunning from failed steps
#

AT_SETUP([Test rerunning templates])

# Fail early
AT_CHECK([srs-go -template $at_dir/nest -dir exp.test -- failsteps 'step010' outfile `pwd`/testa.out > testa.log 2>&1], [1], [])
AT_CHECK([cat testa.out], [], [step010
step010 failed
])

# Restart a bit later
AT_CHECK([srs-go -dir exp.test -- failsteps 'step010.step010.step020' outfile `pwd`/testb.out > testb.log 2>&1], [1], [])
AT_CHECK([cat testb.out], [], [step010
step010.step010.step020
step010.step010.step020 failed
])

# .. and so on
AT_CHECK([srs-go -dir exp.test -- failsteps 'step020.step010.step020' outfile `pwd`/testc.out > testc.log 2>&1], [1], [])
AT_CHECK([cat testc.out], [], [step010.step010.step020
step020.step010.step020
step020.step010.step020 failed
])

AT_CHECK([srs-go -dir exp.test -- failsteps 'step020.step020' outfile `pwd`/testd.out > testd.log 2>&1], [1], [])
AT_CHECK([cat testd.out], [], [step020.step010.step020
step020.step020
step020.step020 failed
])

AT_CHECK([srs-go -dir exp.test -- failsteps 'step010.step030.step020' outfile `pwd`/teste.out > teste.log 2>&1], [1], [])
AT_CHECK([cat teste.out], [], [step020.step020
step010.step030.step020
step010.step030.step020 failed
])

AT_CHECK([srs-go -dir exp.test -- outfile `pwd`/testf.out > testf.log 2>&1], [], [])
AT_CHECK([cat testf.out], [], [step010.step030.step020
])

# Clean up
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])

AT_CLEANUP

######################################################################
#
# Test restarting using the -restart flag
#

AT_SETUP([-restart tests])
AT_CHECK([srs-go -template $at_dir/nest -dir exp.test -- outfile `pwd`/testa.out failsteps step020.step010.step020 > testa.log 2>&1], [1], [])
AT_CHECK([cat testa.out], [], [step010
step010.step010.step020
step020.step010.step020
step020.step010.step020 failed
])

AT_CHECK([srs-go -dir exp.test -restart -- outfile `pwd`/testb.out failsteps step020.step020 > testb.log 2>&1], [1], [])
AT_CHECK([cat testb.out], [], [step010
step010.step010.step020
step020.step010.step020
step020.step020
step020.step020 failed
])

AT_CHECK([srs-go -dir exp.test -restart -from step020/step010.step020/step020.step010.step020 -- outfile `pwd`/testc.out > testc.log 2>&1], [], [])
AT_CHECK([cat testc.out], [], [step020.step010.step020
step020.step020
step010.step030.step020
])

AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])

AT_CLEANUP

######################################################################
#
# Test stopping in the middle with -to.
#

AT_SETUP([-to tests])
AT_CHECK([srs-go -template $at_dir/nest -dir exp.test -to step020/step010.step020/step010.step010.step020 -- outfile `pwd`/testa.out > testa.log 2>&1 ], [], [])
AT_CHECK([cat testa.out], [], [step010
step010.step010.step020
])

AT_CHECK([srs-go -dir exp.test -- outfile `pwd`/testb.out > testb.log 2>&1], [], [])
AT_CHECK([cat testb.out], [], [step020.step010.step020
step020.step020
step010.step030.step020
])

AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR])

AT_CLEANUP

######################################################################
######################################################################
# 
# Retry and timeout tests. Currently, just tests that they fail or
# succeed correctly. They should probably be expanded to actually make
# sure they run the correct number of times.
#

AT_BANNER([Retry and timeout tests])

AT_SETUP([Timeout and fail])
AT_CHECK([srs-go -template $at_dir/timeout -dir exp.test -timeout 2 > test.log 2>& 1], [1], [])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR])
AT_CLEANUP

AT_SETUP([Retry then fail])
AT_CHECK([srs-go -template $at_dir/retry -dir exp.test -retries 2 > test.log 2>&1], [1], [])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR])
AT_CLEANUP

AT_SETUP([Retry successfully with timeouts])
AT_CHECK([srs-go -template $at_dir/retry -dir exp.test -retries 3 -timeout 5 > test.log 2>&1], [], [])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

######################################################################
######################################################################
#
# Conditional tests 
#

AT_BANNER([SWITCH tests])

AT_SETUP([SWITCH test 1])
AT_CHECK([srs-go -template $at_dir/cond -dir exp.test -- outfile `pwd`/test1.out varA val1 varB val1 varC val1 varD val1 > test1.log 2>&1], [], [])
AT_CHECK([cat test1.out], [], [step010
step020.test.SWITCH_CASE.val1
step010.step030
step010.step040.SWITCH.varB
step010.step040.SWITCH_CASE.val1
step010.step050
step050.SWITCH_CASE.val1
])
AT_CHECK([find exp.test -name '*SWITCHED*' | sort], [], [exp.test/step020.test.SWITCHED_CASE.val1
exp.test/step040/step010.step040.SWITCHED_CASE.val1
exp.test/step050.SWITCHED_CASE.val1
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

AT_SETUP([SWITCH default test])
AT_CHECK([srs-go -template $at_dir/cond -dir exp.test -- outfile `pwd`/test1.out varA someval varC val2 varD val2 > test1.log 2>&1], [], [])
AT_CHECK([cat test1.out], [], [step010
step020.test.SWITCH_DEFAULT
step010.step030
step010.step040.SWITCH.varB
step010.step040.SWITCH_DEFAULT
step010.step050
step010.step050.SWITCH_CASE.val2
])
AT_CHECK([find exp.test -name '*SWITCHED*' | sort], [], [exp.test/step020.test.SWITCHED_DEFAULT
exp.test/step040/step010.step040.SWITCHED_DEFAULT
exp.test/step050.SWITCHED_CASE.val2
exp.test/step050.SWITCH_CASE.val2/step010.step050.SWITCHED_CASE.val2
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

AT_SETUP([SWITCH default failure test])
AT_CHECK([srs-go -template $at_dir/cond -dir exp.test -- outfile `pwd`/test1.out varA val2 varB val2 varD val2 > test1.log 2>&1], [1], [])
AT_CHECK([cat test1.out], [], [step010
step020.test.SWITCH_CASE.val2
step010.step030
step010.step040.SWITCH.varB
step010.step040.SWITCH_CASE.val2
step010.step050
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP

AT_SETUP([SWITCH restart test])
AT_CHECK([srs-go -template $at_dir/cond -dir exp.test -- outfile `pwd`/test.out varA val1 varB val1 varC val1 varD val1 > test1.log 2>&1], [], [])
AT_CHECK([srs-go -dir exp.test -from step040 -restart -- outfile `pwd`/test.out varB val2 varC val2 varD val2 > test2.log 2>&1], [], [])
AT_CHECK([cat test.out], [], [step010
step020.test.SWITCH_CASE.val1
step010.step030
step010.step040.SWITCH.varB
step010.step040.SWITCH_CASE.val1
step010.step050
step050.SWITCH_CASE.val1
step010.step040.SWITCH.varB
step010.step040.SWITCH_CASE.val2
step010.step050
step010.step050.SWITCH_CASE.val2
])
AT_CHECK([find exp.test -name '*SWITCHED*' | sort], [], [exp.test/step020.test.SWITCHED_CASE.val1
exp.test/step040/step010.step040.SWITCHED_CASE.val2
exp.test/step050.SWITCHED_CASE.val2
exp.test/step050.SWITCH_CASE.val2/step010.step050.SWITCHED_CASE.val2
])
AT_CHECK([srs-go -cleanall -dir exp.test -loglevel ERROR], [], [])
AT_CLEANUP



######################################################################
######################################################################
#
# srs-go-parallel tests 
#

AT_BANNER([srs-go-parallel tests])

AT_SETUP([Simple srs-go-parallel test])
AT_CHECK([seq -f "val1.%g" 3 > v1], [], [])
AT_CHECK([seq -f `pwd`/out%g 3 > out], [], [])
AT_CHECK([srs-go-parallel -template $at_dir/simple -dir exp.test -pvar v1 v1 -pvar outfile out -- v2 val2 > test.log 2>&1], [], [])
AT_CHECK([cat out1], [], [step000
v1
val1.1
v2
val2
])
AT_CHECK([cat out2], [], [step000
v1
val1.2
v2
val2
])
AT_CHECK([cat out3], [], [step000
v1
val1.3
v2
val2
])
AT_CHECK([srs-go-parallel -cleanall -dir exp.test -loglevel ERROR])
AT_CLEANUP

AT_BANNER([srs-go-parallel-litestep tests])

AT_SETUP([Simple srs-go-parallel-litestep test])
AT_CHECK([seq -f "val1.%g" 3 > v1], [], [])
AT_CHECK([seq -f `pwd`/out%g 3 > out], [], [])
AT_CHECK([srs-go-parallel-litestep -template $at_dir/simple -pvar v1 v1 -pvar outfile out -- v2 val2 > test.log 2>&1], [], [])
AT_CHECK([cat out1], [], [step000
v1
val1.1
v2
val2
])
AT_CHECK([cat out2], [], [step000
v1
val1.2
v2
val2
])
AT_CHECK([cat out3], [], [step000
v1
val1.3
v2
val2
])
AT_CLEANUP

AT_SETUP([Medium streaming config srs-go-parallel-litestep test])
AT_CHECK([seq -f "val1.%g" 3 > v1], [], [])
AT_CHECK([seq -f `pwd`/out%g 3 > out], [], [])
AT_CHECK([seq -f '%03g' 1 999 | xargs -INUM printf 'varNUM valNUM\n' > test.config], [], [])
AT_CHECK([srs-go-parallel-litestep -template $at_dir/dumpconfig -pvar v1 v1 -pvar outfile out -config test.config -stream-config > test.log 2>&1], [], [])
AT_CHECK([diff out1 test.config | grep -v outfile], [], [1,2d0
< v1 val1.1
])
AT_CHECK([diff out2 test.config | grep -v outfile], [], [1,2d0
< v1 val1.2
])
AT_CHECK([diff out3 test.config | grep -v outfile], [], [1,2d0
< v1 val1.3
])
AT_CLEANUP

# Note: longer than 3999 and we exceed ARG_MAX
AT_SETUP([Large streaming config srs-go-parallel-litestep test])
AT_CHECK([seq -f "val1.%g" 3 > v1], [], [])
AT_CHECK([seq -f `pwd`/out%g 3 > out], [], [])
AT_CHECK([seq -f '%04g' 1 3999 | xargs -INUM printf 'varNUM valNUM\n' > test.config], [], [])
AT_CHECK([srs-go-parallel-litestep -template $at_dir/dumpconfig -pvar v1 v1 -pvar outfile out -config test.config -stream-config > test.log 2>&1], [], [])
AT_CHECK([diff out1 test.config | grep -v outfile | grep -v srs_go_], [], [1,2d0
< v1 val1.1
])
AT_CHECK([diff out2 test.config | grep -v outfile | grep -v srs_go_], [], [1,2d0
< v1 val1.2
])
AT_CHECK([diff out3 test.config | grep -v outfile | grep -v srs_go_], [], [1,2d0
< v1 val1.3
])
AT_CLEANUP
